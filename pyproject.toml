[project]
name = 'pyprefab'
description = 'Python application template for personal use'
license = {text = 'MIT License'}
readme = 'README.md'
requires-python = '>=3.9,<3.14'
classifiers = [
    'Programming Language :: Python :: 3',
    'License :: OSI Approved :: MIT License',
]
dynamic = ['version']

dependencies = [
    'structlog',
    'rich',
    "typer",
    "jinja2>=3.1.5",
]

[dependency-groups]
dev = [
    'build',
    'coverage',
    'freezegun',
    'mypy',
    'pre-commit',
    'pytest',
    "pytest-random-order>=1.1.1",
    'ruff',
    "syrupy==4.8.1",
    "tomli>=2.2.1",
]
docs = [
    "matplotlib>=3.9.4",
    "myst-parser>=3.0.1",
    "sphinx>=7.4.7",
    "sphinx-autobuild>=2024.10.3",
    "sphinx-copybutton>=0.5.2",
    "sphinxext-opengraph>=0.9.1",
]

[project.scripts]
pyprefab = "pyprefab.cli:app"

[project.urls]
Documentation = "https://reichlab.github.io/pyprefab/index.html"
Repository = "https://github.com/reichlab/pyprefab.git"
Changelog = "https://github.com/reichlab/pyprefab/blob/main/CHANGELOG.md"

[build-system]
# Minimum requirements for the build system to execute.
requires = ['setuptools>=45', 'wheel', "setuptools_scm>=8"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
namespaces = true
where = ["src"]

[tool.setuptools.package-data]
"pyprojgen.templates" = ["*.j2", "*.jinja2", "*"]

[tool.setuptools_scm]
local_scheme = "no-local-version"

[tool.pyprefab]
# to write json-formatted logs to disk, uncomment the following line specify the file location
# log_file = '/path/to/logs/files/pyprefab.log'

[tool.pytest.ini_options]
addopts = "--random-order"
tmp_path_retention_policy = "none"
testpaths = [
    "test",
]

[tool.coverage.run]
omit = [
    # omit jinja templates from coverage reports
    '*/templates/*'
]

[tool.ruff]
line-length = 120
lint.extend-select = ['I', 'Q']

[tool.ruff.lint.flake8-quotes]
inline-quotes = 'single'

[tool.ruff.format]
quote-style = 'single'

[tool.uv]
# ensure setuptools_scm generates a version number that reflects latest tags
# https://docs.astral.sh/uv/concepts/cache/#dynamic-metadata
cache-keys = [{ git = { commit = true, tags = true } }]
